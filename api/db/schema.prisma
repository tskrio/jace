generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native"]
}

datasource db {
  provider     = "postgresql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

model Property {
  cuid      String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  name      String   @unique
  type      String   @default("string")
  value     String?

  @@index([name])
  @@index([value])
}

model Message {
  cuid      String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  language  String
  entity    String
  value     String

  @@unique([entity, language])
  @@index([entity])
  @@index([value])
}

model User {
  cuid                String        @id @default(cuid())
  createdAt           DateTime      @default(now())
  updatedAt           DateTime      @updatedAt
  name                String        @default("")
  username            String        @unique @default("")
  verifiedAt          DateTime?
  email               String        @unique
  loginToken          String?
  loginTokenExpiresAt DateTime?
  salt                String?       @default("")
  GroupMember         GroupMember[] @relation("UserGroupMember")
  Preference          Preference[]  @relation("UserPreference")

  @@index([email])
  @@index([name])
}

model Preference {
  cuid      String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  entity    String
  value     String?
  userCuid  String
  User      User     @relation("UserPreference", fields: [userCuid], references: [cuid], onDelete: Cascade)

  @@unique([entity, userCuid])
  @@index([userCuid])
  @@index([entity])
  @@index([value])
}

model Group {
  cuid        String        @id @default(cuid())
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
  name        String        @unique
  description String
  GroupMember GroupMember[]
  GroupRole   GroupRole[]

  @@index([name])
}

model GroupMember {
  cuid      String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  userCuid  String
  groupCuid String
  group     Group    @relation(fields: [groupCuid], references: [cuid], onDelete: Cascade)
  user      User     @relation("UserGroupMember", fields: [userCuid], references: [cuid], onDelete: Cascade)

  @@unique([userCuid, groupCuid])
  @@index([groupCuid])
  @@index([userCuid])
}

model GroupRole {
  cuid      String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  role      String
  groupCuid String
  group     Group    @relation(fields: [groupCuid], references: [cuid], onDelete: Cascade)

  @@unique([groupCuid, role])
  @@index([groupCuid])
}

model Log {
  cuid      String   @id @default(cuid())
  createdAt DateTime @default(now())
  context   Json
  message   String
  source    String
}
