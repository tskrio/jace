generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Property {
  cuid      String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  name      String   @unique
  type      String   @default("string")
  value     String?
}

model Message {
  cuid      String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  language  String
  entity    String
  value     String

  @@unique([entity, language])
}

model User {
  cuid                String        @id @default(cuid())
  createdAt           DateTime      @default(now())
  updatedAt           DateTime      @updatedAt
  name                String        @default("")
  username            String        @unique @default("") // will have username OR subject keep masked
  verifiedAt          DateTime? //               // used to verify account for password reset purposes and for actual access
  email               String?       @default("") // not needed for accounts.. but is needed for communications
  hashedPassword      String?       @default("") //      // used for dbAuth
  salt                String?       @default("") //      // used for dbAuth
  resetToken          String? //                         // used for dbAuth
  resetTokenExpiresAt DateTime? //                       // used for dbAuth
  GroupMember         GroupMember[] @relation("UserGroupMember")
  Preference          Preference[]  @relation("UserPreference")
}

model Preference {
  cuid      String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  entity    String
  value     String?
  userCuid  String
  User      User     @relation("UserPreference", fields: [userCuid], references: [cuid], onDelete: Cascade)

  @@unique([entity, userCuid])
  @@index([userCuid])
}

model Group {
  cuid        String        @id @default(cuid())
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
  name        String        @unique
  description String
  GroupMember GroupMember[]
  GroupRole   GroupRole[]
}

model GroupMember {
  cuid      String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  userCuid  String
  groupCuid String
  Group     Group    @relation(fields: [groupCuid], references: [cuid], onDelete: Cascade)
  User      User     @relation("UserGroupMember", fields: [userCuid], references: [cuid], onDelete: Cascade)

  @@unique([userCuid, groupCuid])
  @@index([groupCuid])
  @@index([userCuid])
}

model GroupRole {
  cuid      String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  role      String
  groupCuid String
  Group     Group    @relation(fields: [groupCuid], references: [cuid], onDelete: Cascade)

  @@unique([groupCuid, role])
  @@index([groupCuid])
}

model Log {
  cuid      String   @id @default(cuid())
  createdAt DateTime @default(now())
  context   Json
  message   String
  source    String
}
